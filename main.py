import logging
import sqlite3
import requests
import pymorphy3
import datetime

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

import config
import keyboard as kb
from geocode import get_ll_span

logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()

# —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot, storage=storage)


class AllStates(StatesGroup):
    waiting_for_support = State()

    gl_q1 = State()
    gl_q2 = State()
    gl_q3 = State()
    gl_q4 = State()
    gl_q5 = State()
    gl_answ = State()

    zh_q1 = State()
    zh_q2 = State()
    zh_q3 = State()
    zh_q4 = State()
    zh_q5 = State()
    zh_answ = State()

    zub_q1 = State()
    zub_q2 = State()
    zub_q3 = State()
    zub_q4 = State()
    zub_q5 = State()
    zub_answ = State()

    ru_q1 = State()
    ru_q2 = State()
    ru_q3 = State()
    ru_q4 = State()
    ru_q5 = State()
    ru_answ = State()

    uh_q1 = State()
    uh_q2 = State()
    uh_q3 = State()
    uh_q4 = State()
    uh_q5 = State()
    uh_answ = State()

    c1_st = State()
    admin_st = State()
    photo_st = State()
    vopr_st = State()


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—Ö–æ–¥–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º –∫–Ω–æ–ø–æ–∫
def create_inline_keyboard(array_of_buttons, size):
    in_keyboard = types.InlineKeyboardMarkup(row_width=size)
    mas = []
    for i in array_of_buttons:
        mas.append(types.InlineKeyboardButton(text=i[0], callback_data=i[1]))
    in_keyboard.add(*mas)
    return in_keyboard


# –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ, –Ω–∞ –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —Ä–µ–∞–≥–∏—Ä—É–µ–º.
# –¢–∞–∫ –∫–∞–∫ –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–∏—à–µ–º await.
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=f"–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}!\n{config.HI}", reply_markup=kb.menu)

    await bot.send_message(chat_id=message.from_user.id,
                           text=config.VOT,
                           reply_markup=kb.main_inline_menu)


# —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(commands=['admin'])
async def send_welcome(message: types.Message):
    await AllStates.admin_st.set()
    await bot.send_message(chat_id=message.from_user.id,
                           text=config.ADMHI, reply_markup=kb.menu)
    await message.answer(config.ADMNUM)
    conn = sqlite3.connect(config.sql)
    curs = conn.cursor()
    res_support = curs.execute(f'''SELECT id, id_user, quest FROM support''').fetchall()

    for el in res_support:
        await message.answer(f'{el[0]} - {el[1]} - {el[2]}')

    conn.commit()


# —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∞
@dp.message_handler(state=AllStates.admin_st)
async def admin_support(message: types.Message, state: FSMContext):
    num_quest = int(message.text)

    conn = sqlite3.connect(config.sql)
    curs = conn.cursor()

    curs.execute('''DELETE FROM support WHERE id == ?''', (num_quest,))
    conn.commit()

    await message.answer(text=config.QUEDEL,
                         reply_markup=kb.main_inline_menu)
    await state.finish()


# –ø—É–Ω–∫—Ç 5 –∑–∞–¥–∞–Ω–∏—è
@dp.message_handler(content_types=['text'], text="‚òé –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
async def waiting_for_support(message: types.Message):
    await AllStates.waiting_for_support.set()
    await message.answer(config.ANSAS)


# —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É
@dp.message_handler(state=AllStates.waiting_for_support)
async def process_support(message: types.Message, state: FSMContext):
    id_us = message.from_user.username
    mes = message.text
    conn = sqlite3.connect(config.sql)
    curs = conn.cursor()

    curs.execute(f'''INSERT INTO support (id_user, quest)
                    VALUES (?, ?)''', (id_us, mes)).fetchall()

    conn.commit()

    await message.answer(text="–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–∞–ø–∏c–∞–ª–∏ –Ω–∞–º. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
                         reply_markup=kb.main_inline_menu)
    await state.finish()


# –∑–∞–¥–∞–Ω–∏–µ 2
@dp.message_handler(text=['‚ù§–°–∏–º–ø—Ç–æ–º—ã'])
async def docs(message: types.Message, state: FSMContext):
    await message.answer(text="–ß—Ç–æ —É –í–∞—Å –±–æ–ª–∏—Ç?",
                         reply_markup=kb.menu_simp)
    await state.finish()


@dp.message_handler(text=['–ù–∞–∑–∞–¥ üîô'])
async def back(message: types.Message):
    await message.answer(text=config.BACK, reply_markup=kb.menu)


# –ì–û–õ–û–í–ê
@dp.message_handler(text=['üß† –ì–æ–ª–æ–≤–∞'])
async def g1_st(message: types.Message):
    await message.answer(text="–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–æ–∫–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤")
    await AllStates.gl_q1.set()
    await message.answer(text="–ö–∞–∫ –¥–∞–≤–Ω–æ –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞?<b>\n–î–∞–≤–Ω–æ/–ù–µ–¥–∞–≤–Ω–æ/–ù–µ –∑–Ω–∞—é</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.gl_q1)
async def g1_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_1'] = message.text
    await AllStates.next()
    await message.answer(text="–ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã —É–ø–∞–ª–∏? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.gl_q2)
async def g2_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_2'] = message.text
    await AllStates.next()
    await message.answer(text="–ú–µ—Ä–∏–ª–∏ –¥–∞–≤–ª–µ–Ω–∏–µ? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.gl_q3)
async def g3_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_3'] = message.text
    await AllStates.next()
    await message.answer(text="–í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.gl_q4)
async def g4_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_4'] = message.text
    await AllStates.next()
    await message.answer(text="–£ –≤–∞—Å —Å–∏–ª—å–Ω–æ –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.gl_q5)
async def g5_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_5'] = message.text
    await AllStates.next()

    async with state.proxy() as data:
        # –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ–ª–æ–≤—ã
        if data['1_1'] == "–î–∞–≤–Ω–æ" and data['1_2'] == "–î–∞" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–î–∞" and data['1_5'] == "–î–∞":
            await message.answer(text="–í–∏–¥–∏–º–æ —É –≤–∞—Å –º–∏–≥—Ä–µ–Ω—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É, —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∏–∂–µ",
                                 reply_markup=kb.inline_kb1)

        elif data['1_1'] == "–ù–µ–¥–∞–≤–Ω–æ" and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–í–∏–¥–∏–º–æ —É –≤–∞—Å –ø—Ä–æ—Å—Ç–æ –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞, –≤—ã–ø–µ–π—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É –Ω–∞ –æ–±—Å–ª–µ–¥–¥–æ–≤–∞–Ω–∏–µ",
                reply_markup=kb.inline_kb1)

        elif data['1_1'] == "–î–∞–≤–Ω–æ" and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–í–∏–¥–∏–º–æ —É –≤–∞—Å –ø—Ä–æ—Å—Ç–æ –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞, –≤—ã–ø–µ–π—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É –Ω–∞ –æ–±—Å–ª–µ–¥–¥–æ–≤–∞–Ω–∏–µ",
                reply_markup=kb.inline_kb1)

        elif data['1_1'] == "–ù–µ –∑–Ω–∞—é" and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–í–∏–¥–∏–º–æ –≤—ã —Å–∏–ª—å–Ω–æ —É–ø–∞–ª–∏, —Å–æ–≤–µ—Ç—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≥–æ–ª–æ–≤—ã",
                reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–ù–µ—Ç" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(text="–ú–æ–∂–µ—Ç —É –≤–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –±–æ–ª–∏—Ç?", reply_markup=kb.inline_kb1)

        else:
            await message.answer(text="–°–æ–≤–µ—Ç—É–µ–º –≤—ã–ø–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å,"
                                      " –µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ - –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É")

    await state.finish()


# –ñ–ò–í–û–¢
@dp.message_handler(text=['‚ù§ –ñ–∏–≤–æ—Ç'])
async def zh1_st(message: types.Message):
    await message.answer(text="–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–æ–∫–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤")
    await AllStates.zh_q1.set()
    await message.answer(text="–ö–∞–∫ –¥–∞–≤–Ω–æ –±–æ–ª–∏—Ç –∂–∏–≤–æ—Ç? <b>\n–î–∞–≤–Ω–æ/–ù–µ–¥–∞–≤–Ω–æ/–ù–µ –∑–Ω–∞—é</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.zh_q1)
async def zh1_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_1'] = message.text
    await AllStates.next()
    await message.answer(text="–ú–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã —É—à–∏–±–ª–∏—Å—å? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.zh_q2)
async def zh2_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_2'] = message.text
    await AllStates.next()
    await message.answer(text="–£ –≤–∞—Å –µ—Å—Ç—å —Ç–µ–º–ø—Ä–µ–∞—Ç—É—Ä–∞? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.zh_q3)
async def zh3_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_3'] = message.text
    await AllStates.next()
    await message.answer(text="–í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.zh_q4)
async def zh4_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_4'] = message.text
    await AllStates.next()
    await message.answer(text="–£ –≤–∞—Å —Å–∏–ª—å–Ω–æ –±–æ–ª–∏—Ç –∂–∏–≤–æ—Ç? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.zh_q5)
async def zh5_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_5'] = message.text
    await AllStates.next()

    async with state.proxy() as data:
        # –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ–ª–æ–≤—ã
        if data['1_1'] == "–î–∞–≤–Ω–æ" and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–î–∞" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–í–∏–¥–∏–º–æ —É –≤–∞—Å –Ω–µ—Å–≤–∞—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å—Å—è —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É, —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∏–∂–µ",
                reply_markup=kb.inline_kb1)

        elif data['1_1'] == "–ù–µ–¥–∞–≤–Ω–æ" and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–°–∫–æ—Ä–µ–µ –≤—ã–ø–µ–π—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É –Ω–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
                reply_markup=kb.inline_kb1)

        elif data['1_1'] == "–î–∞–≤–Ω–æ" and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–í–∏–¥–∏–º–æ —É –≤–∞—Å –ø—Ä–æ—Å—Ç–æ –±–æ–ª–∏—Ç –∂–∏–≤–æ—Ç, –≤—ã–ø–µ–π—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É –Ω–∞ –æ–±—Å–ª–µ–¥–¥–æ–≤–∞–Ω–∏–µ",
                reply_markup=kb.inline_kb1)

        elif data['1_1'] == "–ù–µ –∑–Ω–∞—é" and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–í–∏–¥–∏–º–æ –≤—ã –ø—Ä–æ—Å—Ç–æ —É–¥–∞—Ä–∏–ª–∏—Å—å, —Å–æ–≤–µ—Ç—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∂–∏–≤–æ—Ç–∞",
                reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–ù–µ—Ç" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(text="–ú–æ–∂–µ—Ç —É –≤–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –±–æ–ª–∏—Ç?", reply_markup=kb.inline_kb1)

        else:
            await message.answer(text="–°–æ–≤–µ—Ç—É–µ–º –≤—ã–ø–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å,"
                                      " –µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ - –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É")

    await state.finish()


# –ó–£–ë
@dp.message_handler(text=['ü¶∑ –ó—É–±—ã'])
async def z_st(message: types.Message):
    await message.answer(text="–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–æ–∫–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤")
    await AllStates.zub_q1.set()
    await message.answer(text="–ö–∞–∫ –¥–∞–≤–Ω–æ —É –≤–∞—Å –±–æ–ª—è—Ç –∑—É–±—ã? <b>\n–î–∞–≤–Ω–æ/–ù–µ–¥–∞–≤–Ω–æ/–ù–µ –∑–Ω–∞—é</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.zub_q1)
async def z1_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_1'] = message.text
    await AllStates.next()
    await message.answer(text="–ú–æ–≥–ª–∏ –ª–∏ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ —Å–∫–æ–ª –∫—É—Å–æ—á–∫–∞ –∑—É–±–∞? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.zub_q2)
async def z2_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_2'] = message.text
    await AllStates.next()
    await message.answer(text="–ß–∏—Å—Ç–∏—Ç–µ –ª–∏ –≤—ã –∑—É–±—ã 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.zub_q3)
async def z3_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_3'] = message.text
    await AllStates.next()
    await message.answer(text="–í—ã —É–∂–µ –≤—ã–ø–∏–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.zub_q4)
async def z4_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_4'] = message.text
    await AllStates.next()
    await message.answer(text="–ï–ª–∏ –ª–∏ –≤—ã –∫–∏—Å–ª–æ–µ/—Ñ—Ä—É–∫—Ç—ã –Ω–µ–¥–∞–≤–Ω–æ? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.zub_q5)
async def z5_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_5'] = message.text
    await AllStates.next()

    async with state.proxy() as data:
        # –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ–ª–æ–≤—ã
        if data['1_1'] == "–ù–µ–¥–∞–≤–Ω–æ" and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–î–∞" and data['1_5'] == "–î–∞":
            await message.answer(text="–í–æ–∑–º–æ–∂–Ω–æ –∑—É–± –±–æ–ª–∏—Ç –∏–∑-–∑–∞ –ø—Ä–∏–Ω—è—Ç–æ–π –ø–∏—â–∏, –ø—Ä–æ–ø–æ–ª–æ—â–∏—Ç–µ —Ä–æ—Ç, –µ—Å–ª–∏ –±–æ–ª—å –Ω–µ —É—Ç–∏—Ö–Ω–µ—Ç"
                                      " —Ç–æ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É –ø–æ –∫–Ω–æ–ø–∫–µ –≤–Ω–∏–∑—É", reply_markup=kb.inline_kb1)

        elif data['1_1'] == "–ù–µ–¥–∞–≤–Ω–æ" and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–í–æ–∑–º–æ–∂–Ω–æ –∑—É–± –±–æ–ª–∏—Ç –∏–∑-–∑–∞ –ø—Ä–∏–Ω—è—Ç–æ–π –ø–∏—â–∏, –ø—Ä–æ–ø–æ–ª–æ—â–∏—Ç–µ —Ä–æ—Ç –∏ –º–æ–∂–µ—Ç–µ –≤—ã–ø–∏—Ç—å —Å–ª–∞–±–æ–µ –æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–∏–µ,"
                     " –µ—Å–ª–∏ –±–æ–ª—å –Ω–µ —É—Ç–∏—Ö–Ω–µ—Ç —Ç–æ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É –ø–æ –∫–Ω–æ–ø–∫–µ –≤–Ω–∏–∑—É", reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–î–∞–≤–Ω–æ" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–î–∞" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(
                text="–£ –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ —ç–º–∞–ª—å –∑—É–±–æ–≤, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É –ø–æ –∫–Ω–æ–ø–∫–µ —Å–Ω–∏–∑—É",
                reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–ù–µ –∑–Ω–∞—é" or data['1_1'] == '–ù–µ–¥–∞–≤–Ω–æ') and data['1_2'] == "–î–∞" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(
                text="–í–∏–¥–∏–º–æ –≤—ã —Å–∫–æ–ª–æ–ª–∏ –Ω–µ–±–æ–ª—å—à–æ–π –∫—É—Å–æ—á–µ–∫ –∑—É–±–∞, —Å–æ–≤–µ—Ç—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É",
                reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–ù–µ—Ç" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(text="–ú–æ–∂–µ—Ç —É –≤–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –±–æ–ª–∏—Ç?", reply_markup=kb.inline_kb1)

        else:
            await message.answer(text="–°–æ–≤–µ—Ç—É–µ–º –≤—ã–ø–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å,"
                                      " –µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ - –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É")

    await state.finish()


# –†–£–ö–ê –ò–õ–ò –ù–û–ì–ê
@dp.message_handler(text=['üí™ –†—É–∫–∞ –∏–ª–∏ –Ω–æ–≥–∞'])
async def r1_st(message: types.Message):
    await message.answer(text="–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–æ–∫–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤")
    await AllStates.ru_q1.set()
    await message.answer(text="–ö–∞–∫ –¥–∞–≤–Ω–æ —É –≤–∞—Å –±–æ–ª–∏—Ç –∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å? <b>\n–î–∞–≤–Ω–æ/–ù–µ–¥–∞–≤–Ω–æ/–ù–µ –∑–Ω–∞—é</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.ru_q1)
async def r1_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_1'] = message.text
    await AllStates.next()
    await message.answer(text="–ú–æ–∂–µ—Ç –≤—ã —É—à–∏–±–ª–∏—Å—å? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.ru_q2)
async def r2_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_2'] = message.text
    await AllStates.next()
    await message.answer(text="–£ –≤–∞—Å –µ—Å—Ç—å —Å–∏–Ω—è–∫ –Ω–∞ –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.ru_q3)
async def r3_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_3'] = message.text
    await AllStates.next()
    await message.answer(text="–í–∞—Å –º–æ–≥ –∫—Ç–æ-—Ç–æ —É–∫—É—Å–∏—Ç—å? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.ru_q4)
async def r4_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_4'] = message.text
    await AllStates.next()
    await message.answer(text="–°–∏–ª—å–Ω–æ –ª–∏ –±–æ–ª–∏—Ç –∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.ru_q5)
async def r5_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_5'] = message.text
    await AllStates.next()

    async with state.proxy() as data:
        # –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ–ª–æ–≤—ã
        if (data['1_1'] == "–ù–µ–¥–∞–≤–Ω–æ" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–î–∞" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–í–æ–∑–º–æ–∂–Ω–æ –≤–∞—Å —É–∫—É—Å–∏–ª–æ –∫–∞–∫–æ–µ-–ª–∏–±–æ –Ω–∞—Å–µ–∫–æ–º–æ–µ –∏–ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ, —Å–æ–≤–µ—Ç—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É",
                reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–ù–µ–¥–∞–≤–Ω–æ" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(
                text="–í–æ–∑–º–æ–Ω–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∞ –≤–æ–¥—ã –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ, –µ—Å–ª–∏ —ç—Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏—á–∏–Ω—è—Ç—å –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É",
                reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–î–∞–≤–Ω–æ" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–î–∞" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã —Å–∏–ª—å–Ω–æ —É–¥–∞—Ä–∏–ª–∏—Å—å, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—Å—è –∫ —Ç—Ä–∞–≤–º–∞—Ç–æ–ª–æ–≥—É",
                reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–ù–µ –∑–Ω–∞—é" or data['1_1'] == '–ù–µ–¥–∞–≤–Ω–æ') and data['1_2'] == "–î–∞" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(
                text="–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ —Å–∏–ª—å–Ω–æ —É–¥–∞—Ä–∏–ª–∏—Å—å, —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–π–¥–µ—Ç")

        elif (data['1_1'] == "–ù–µ—Ç" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(text="–ú–æ–∂–µ—Ç —É –≤–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –±–æ–ª–∏—Ç?", reply_markup=kb.inline_kb1)

        else:
            await message.answer(text="–°–æ–≤–µ—Ç—É–µ–º –≤—ã–ø–∏—Ç—å –æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ –∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ - –≤–µ—Ä–Ω–∏—Ç–µ—Å—å"
                                      " –Ω–∞–∑–∞–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É")

    await state.finish()


# –£–•–û
@dp.message_handler(text=['üëÇ –£—Ö–æ'])
async def u1_st(message: types.Message):
    await message.answer(text="–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–æ–∫–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤")
    await AllStates.uh_q1.set()
    await message.answer(text="–ö–∞–∫ –¥–∞–≤–Ω–æ —É –≤–∞—Å –±–æ–ª–∏—Ç —É—Ö–æ? <b>\n–î–∞–≤–Ω–æ/–ù–µ–¥–∞–≤–Ω–æ/–ù–µ –∑–Ω–∞—é</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.uh_q1)
async def u1_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_1'] = message.text
    await AllStates.next()
    await message.answer(text="–û–Ω–æ –∑–≤–µ–Ω–∏—Ç? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.uh_q2)
async def u2_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_2'] = message.text
    await AllStates.next()
    await message.answer(text="–í—ã —Å—Ç–∞–ª–∏ —Ö—É–∂–µ —Å–ª—ã—à–∞—Ç—å? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.uh_q3)
async def u3_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_3'] = message.text
    await AllStates.next()
    await message.answer(text="–í—ã –±–æ–ª–µ–µ—Ç–µ? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.uh_q4)
async def u4_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_4'] = message.text
    await AllStates.next()
    await message.answer(text="–°–∏–ª—å–Ω–æ –ª–∏ –±–æ–ª–∏—Ç —É—Ö–æ? <b>\n–î–∞/–ù–µ—Ç</b>", parse_mode='HTML')


@dp.message_handler(state=AllStates.uh_q5)
async def u5_q(message: types.Message, state: AllStates):
    async with state.proxy() as data:
        data['1_5'] = message.text
    await AllStates.next()

    async with state.proxy() as data:
        # –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ–ª–æ–≤—ã
        if (data['1_1'] == "–ù–µ–¥–∞–≤–Ω–æ" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–î–∞" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–í–æ–∑–º–æ–∂–Ω–æ —É—Ö–æ –±–æ–ª–∏—Ç –∏–∑-–∑–∞ –±–æ–ª–µ–∑–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–ø–ª–∏ –¥–ª—è —É—à–µ–π –∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ª–æ—Ä—É",
                reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–ù–µ–¥–∞–≤–Ω–æ" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(
                text="–í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–æ —Å–∫–æ—Ä–æ –ø—Ä–æ–π–¥–µ—Ç, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É",
                reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–î–∞–≤–Ω–æ" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–î–∞" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–î–∞" and data['1_5'] == "–î–∞":
            await message.answer(
                text="–û–±—Ä–∞—Ç–∏—Å—å –∫ –ª–æ—Ä—É, –≤–æ–∑–º–æ–∂–Ω–æ —á—Ç–æ-—Ç–æ —Å–µ—Ä—å–µ–∑–Ω–æ–µ",
                reply_markup=kb.inline_kb1)

        elif (data['1_1'] == "–ù–µ –∑–Ω–∞—é" or data['1_1'] == '–ù–µ–¥–∞–≤–Ω–æ') and data['1_2'] == "–î–∞" and data['1_3'] == "–î–∞" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(
                text="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ—á–∏—Å—Ç–∏—Ç—å —É—à–∏, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∏ –∑–∞–±–∏–ª–∏—Å—å")

        elif (data['1_1'] == "–ù–µ—Ç" or data['1_1'] == "–ù–µ –∑–Ω–∞—é") and data['1_2'] == "–ù–µ—Ç" and data['1_3'] == "–ù–µ—Ç" \
                and data['1_4'] == "–ù–µ—Ç" and data['1_5'] == "–ù–µ—Ç":
            await message.answer(text="–ú–æ–∂–µ—Ç —É –≤–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –±–æ–ª–∏—Ç?", reply_markup=kb.inline_kb1)

        else:
            await message.answer(
                text="–°–æ–≤–µ—Ç—É–µ–º –≤—ã–ø–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å,–µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ - –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏"
                     " –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üìã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É")

    await state.finish()


# –∑–∞–¥–∞–Ω–∏–µ 4
@dp.callback_query_handler(lambda c: c.data, state='*')
async def inline_kb_answer_callback_handler(query: types.CallbackQuery, state: FSMContext):
    # –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥–∞ –∏–∑ –Ω–∞—à–µ–π –ë–î
    conn = sqlite3.connect(config.sql)
    curs = conn.cursor()

    res = curs.execute(f'''SELECT name_city, discr_city FROM cities''').fetchall()
    conn.commit()

    array_btn_cities = []
    for el in res:
        array_btn_cities.append(list(el))

    answer = query.data
    chat_id = query.message.chat.id
    message_id = query.message.message_id

    if answer == 'inf_about_all':
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text='–í—ã–±–∏—Ä–∞–π—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
        # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–∏–≤–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        inf_keyboard = create_inline_keyboard(array_btn_cities, 2)
        main_button = types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')
        inf_keyboard.row(main_button)
        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id,
                                            reply_markup=inf_keyboard)
    elif answer == 'main_menu':
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text='–í—ã –ø–æ–ø–∞–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–∏—Ä–∞–π—Ç–µ —Ä–∞–∑–¥–µ–ª')

        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id,
                                            reply_markup=kb.main_inline_menu)
    elif answer == 'backmenu':
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text='–í—ã–±–∏—Ä–∞–π—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')

        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id,
                                            reply_markup=create_inline_keyboard(array_btn_cities, 2))

    elif answer == 'city_1' or answer == 'back_city1':
        # –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ, —á—Ç–æ –º—ã —Ö–æ—Ç–∏ —É–∑–Ω–∞—Ç—å –≤ –≥. –û—Ä—Å–∫, —É –Ω–µ–≥–æ –Ω–æ–º–µ—Ä 1 –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (stuff)
        await bot.delete_message(chat_id, message_id)
        inkb = InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(text="–û—Ç–¥–µ–ª–µ–Ω–∏—è", callback_data='otd1'),
                                                     InlineKeyboardButton(text="–°–û–¢–†–£–î–ù–ò–ö–ò", callback_data='stuff1'),
                                                     InlineKeyboardButton(text="üìû –ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø üìû",
                                                                          callback_data='contacts'),
                                                     InlineKeyboardButton(text="–ù–ê–ó–ê–î", callback_data='backmenu'))

        await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", reply_markup=inkb)
    elif answer == 'otd1':
        # –≤—Å–µ –æ—Ç–¥–µ–Ω–∏—è –≤ –ø–µ—Ä–≤–æ–º –≥–æ—Ä–æ–¥–µ otd1
        conn = sqlite3.connect(config.sql)
        curs = conn.cursor()
        c1 = curs.execute(f'''SELECT name_city FROM cities
                            WHERE discr_city= "city_1" ''').fetchone()
        res = curs.execute(f'''SELECT name_fil, filials.discr_fil FROM filials
                    WHERE city_fil = 1''').fetchall()
        conn.commit()

        array_btn_city1 = []
        for el in res:
            array_btn_city1.append(list(el))

        back_keyboard_city1 = create_inline_keyboard(array_btn_city1, 1)
        back_btn_otd = types.InlineKeyboardButton(text='–ù–ê–ó–ê–î', callback_data='back_city1')
        back_keyboard_city1.add(back_btn_otd)

        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text=f"–°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–µ–Ω–∏–π –≥–æ—Ä–æ–¥–∞ {c1[0]}", reply_markup=back_keyboard_city1)
    elif answer == 'stuff1':
        # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≥–æ—Ä–æ–¥–∞ city1 - –û—Ä—Å–∫
        await AllStates.photo_st.set()

        conn = sqlite3.connect(config.sql)
        curs = conn.cursor()
        c1 = curs.execute(f'''SELECT name_city FROM cities
                                    WHERE discr_city= "city_1" ''').fetchone()

        res = curs.execute(f'''SELECT fio, discr_doc FROM stuff
                            WHERE stuff.city = 1''').fetchall()
        conn.commit()

        array_btn_all_stuff = []
        for el in res:
            array_btn_all_stuff.append(list(el))

        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text=f"–°–ø–∏—Å–æ–∫ –í–°–ï–• –°–û–¢–†–£–î–ù–ò–ö–û–í –≥–æ—Ä–æ–¥–∞ {c1[0]}",
                                    reply_markup=create_inline_keyboard(array_btn_all_stuff, 1))
    elif answer == 'fil_1_1':
        # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–µ–∂–¥–µ–Ω–∏–∏ –ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞
        conn = sqlite3.connect(config.sql)
        curs = conn.cursor()

        fil1 = curs.execute(f'''SELECT name_fil FROM filials
                            WHERE discr_fil= "fil_1_1" ''').fetchone()

        inf_res = curs.execute(f'''SELECT name_fil, adress_fil, grafik_fil, cities.name_city FROM filials
                                        JOIN cities ON cities.id=filials.city_fil
                                        WHERE filials.discr_fil = "fil_1_1" ''').fetchall()
        conn.commit()

        # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–∏–≤–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        inf_keyboard = types.InlineKeyboardMarkup()
        main_button = types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')
        inf_keyboard.add(main_button)

        inf_mess = f'''
        ‚Ñπ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –£–ß–†–ï–ñ–î–ï–ù–ò–ò ‚Ñπ
        –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï –£–ß–†–ï–ñ–î–ï–ù–ò–Ø: {inf_res[0][0]}
        –ê–î–†–ï–°: {inf_res[0][1]}
        –ì–†–ê–§–ò–ö –†–ê–ë–û–¢–´: {inf_res[0][2]}
        –ì–æ—Ä–æ–¥: {inf_res[0][3]}
        '''
        # –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É
        try:
            ll, spn = get_ll_span(inf_res[0][1])

            if ll and spn:
                lon, lat = map(float, ll.split(','))
                params = {'appid': config.WEATHER_TOKEN, 'lat': lat,
                          'lon': lon, 'units': 'metric', 'lang': 'ru'}
                weather = requests.get(f'http://api.openweathermap.org/data/2.5/weather?lat='
                                       f'{lat}&lon={lon}&appid={config.WEATHER_TOKEN}', params).json()
                point = "{ll},pm2vvl".format(ll=ll)
                static_api_request = "http://static-maps.yandex.ru/1.x/?ll={ll}&spn={spn}&l=map&pt={point}". \
                    format(**locals())
                await bot.send_photo(chat_id=chat_id, photo=static_api_request, caption=inf_mess)
                await bot.send_message(chat_id=chat_id,
                                       text=f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {inf_res[0][1]} —Å–µ–π—á–∞—Å {weather['main']['temp']} –≥—Ä–∞–¥—É—Å–æ–≤,"
                                            f" –∞ –ø–æ –æ—â—É—â–µ–Ω–∏—è–º {weather['main']['feels_like']} –≥—Ä–∞–¥—É—Å–æ–≤",
                                       reply_markup=inf_keyboard)
        except RuntimeError as ex:
            await bot.reply_text(str(ex))
        await state.finish()
        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id,
                                            reply_markup=inf_keyboard)
    elif answer == 'contacts':
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text='üìû –ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø üìû')
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text=config.CONTACTS_MES)
        # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–∏–≤–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        inf_keyboard = types.InlineKeyboardMarkup()
        main_button = types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')
        inf_keyboard.add(main_button)
        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id,
                                            reply_markup=inf_keyboard)
    elif answer == 'help_bot' or answer == '/help':
        # –∑–∞–¥–∞–Ω–∏–µ 6
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text='üìç –ü–æ–º–æ—â—å')
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text=config.HELP_MES)
        # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–∏–≤–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        inf_keyboard = types.InlineKeyboardMarkup()
        main_button = types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')
        inf_keyboard.add(main_button)
        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id,
                                            reply_markup=inf_keyboard)
    elif answer == 'doc_appoit':
        # –∑–∞–¥–∞–Ω–∏–µ 1
        # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–∏–≤–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text="–î–ª—è –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=kb.inline_kb1)


@dp.callback_query_handler(text="city_2")
async def city1(callback: types.CallbackQuery):
    await callback.message.answer("–°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π –≥–æ—Ä–æ–¥–∞2")
    await callback.answer()


@dp.callback_query_handler(text="city_3")
async def city1(callback: types.CallbackQuery):
    await callback.message.answer("–°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π –≥–æ—Ä–æ–¥–∞3")
    await callback.answer()


@dp.message_handler(text=['‚ùî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'])
async def z_st(message: types.Message):
    await message.answer(text="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å")
    await AllStates.vopr_st.set()


@dp.message_handler(state=AllStates.vopr_st)
async def vopr(message: types.Message, state: AllStates):
    time = ["–≤—Ä–µ–º—è", "—á–∞—Å", "–∫–æ—Ç–æ—Ä—ã–π", "—Å–∫–∞–∂–∏", "—Å–∫–æ–ª—å–∫–æ"]
    doc = ["–∫–∞–∫", "–∑–∞–ø–∏—Å—å", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–≤—Ä–∞—á", "–∫", "–≥–¥–µ", "–¥–æ–∫—Ç–æ—Ä", "—Ç–µ—Ä–∞–ø–µ–≤—Ç", "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥",
           "–æ–∫—É–ª–∏—Å—Ç", "–ª–æ—Ä", "–Ω–∞—Ä–∫–æ–ª–æ–≥"]
    bolit = ["–±–æ–ª–∏—Ç", "—á—Ç–æ", "–¥–µ–ª–∞—Ç—å", "–µ—Å–ª–∏", "—É", "–º–µ–Ω—è", "–±–æ–ª–µ—Ç—å"]
    admin = ["–∫–∞–∫", "–∞–¥–º–∏–Ω", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—Å–≤—è–∑—å", "—Å–≤—è–∑–∞—Ç—å", "–Ω–∞–ø–∏—Å–∞—Ç—å", "—Ç–µ—Ö", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è"]
    morph = pymorphy3.MorphAnalyzer()
    p = morph.parse(str(message.text).lower())[0]
    sovpadenie_time = 0
    sovpadenie_doc = 0
    sovpadenie_bolit = 0
    sovpadenie_admin = 0
    for word in p[0].split():
        if word in time:
            sovpadenie_time += 1
            continue
        elif word in doc:
            sovpadenie_doc += 1
            continue
        elif word in bolit:
            sovpadenie_bolit += 1
            continue
        elif word in admin:
            sovpadenie_admin += 1
            continue

    if sovpadenie_time > 1:
        now = datetime.datetime.now()
        await message.reply(f'–°–µ–π—á–∞—Å - {now.strftime("%d-%m-%Y %H:%M:%S")}')
    if sovpadenie_doc > 2:
        await message.reply(f"–î–ª—è –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>–∫–Ω–æ–ø–∫—É</b> –Ω–∏–∂–µ",
                            reply_markup=kb.inline_kb1, parse_mode='HTML')
    if sovpadenie_bolit > 2:
        await message.reply(f"–°–æ–≤–µ—Ç—É—é –ø—Ä–æ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª <b>–°–∏–º–ø—Ç–æ–º—ã</b> –∏ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç, –∏–ª–∏ –∂–µ –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É"
                            f" –Ω–∞ –ø—Ä–∏–µ–º –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ", reply_markup=kb.inline_kb1, parse_mode='HTML')
    if sovpadenie_doc > 2:
        await message.reply(f"–î–ª—è —Å–≤—è–∑–∏ —Å —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>",
                            parse_mode='HTML')
    else:
        await message.reply(f"–ó–∞–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å")
    await state.finish()


# —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç/–∫–æ–º–∞–Ω–¥—É
@dp.message_handler(content_types=['text'])
async def send_sorry(message: types.Message):
    await message.answer(text=config.SORRY)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
